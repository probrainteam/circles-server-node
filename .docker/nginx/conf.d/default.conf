 # upstream 정의
    # Upstream은 request를 요청하는 곳
    # NGINX가 앞단에서 받아 node로 request를 Proxy한다
    # 이런 의미에서 upstream
    upstream node-docker {
        # docker service 이름:port
        server node-dev:3000;
    }
    # 아래 upstream은 load balacing 예제
    # express1, express2, ...는 모두 docker-compose에서 정의된 docker services이름
    # PM2로 로드밸런싱을 진행하는데 NGINX를 통한 로드 밸런싱도 사용하는 것인지는
    # 추가적인 공부가 필요함

    # upstream docker-express {
    # least_conn;
    # server express1:3000 weight=10;
    # server express2:3000 weight=10;
    # server express3:3000 weight=10;
    # server express4:3000 weight=10;
    # }

    # HTTP
    server {
        listen       80;
        server_name  localhost;
        # http(80)을 강제로 443으로 redirect
        # 현재 주석처리
        # location / { 
        #     return 301 https://localhost$request_uri;
        # }
        # @TODO :: ssl 설정 마치고 아래 삭제
         location / {
            proxy_pass         http://node-docker;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;          
        }
    }
    # # HTTPS
    server {
        # listen 443 ssl; # @TODO :: ssl 설정이 완료된 경우 변경
        listen 443;
        server_name localhost;
        # 502 503에 대한 error page 지정
        error_page 502 503 /error.html;

        # proxy_pass : 위에서 정의한 upstream 이름
        location / {
            proxy_pass         http://node-docker; 
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors on;
        }

        location = /error.html {
            root /etc/nginx/static;
            internal;
        }
    }